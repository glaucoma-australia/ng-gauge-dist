{"version":3,"file":"ng-gauge.umd.js","sources":["~/ng-gauge/gauge/shared/gauge-segment.ts","~/ng-gauge/gauge/shared/gauge-label.ts","~/ng-gauge/gauge/gauge.module.ts","~/ng-gauge/gauge/gauge.component.ts"],"sourcesContent":["\nexport class GaugeSegment {\n  radius: number;\n  goal: number;\n  value: number;\n  color: string;\n  bgColor: string;\n  borderWidth: number;\n/**\n * @param {?=} options\n */\nconstructor(options: {\n    radius?: number,\n    goal?: number,\n    value?: number,\n    color?: string,\n    bgColor?: string,\n    borderWidth?: number\n  } = {}) {\n    this.radius = options.radius || 100;\n    this.goal = options.goal || 100;\n    this.value = options.value;\n    this.color = options.color;\n    this.bgColor = options.bgColor || 'transparent';\n    this.borderWidth = options.borderWidth || 100;\n  }\n/**\n * @return {?}\n */\nget computedRadius() {\n    return this.radius - this.borderWidth / 2;\n  }\n/**\n * @this {?}\n * @return {?}\n */\nget strokeProgress(this: GaugeSegment) {\n    return `${2 * Math.PI * this.computedRadius * this.value / this.goal} ${2 * Math.PI * this.computedRadius}`;\n  }\n/**\n * @this {?}\n * @return {?}\n */\nget strokeEmptyProgress(this: GaugeSegment) {\n    return `0 ${2 * Math.PI * this.computedRadius}`;\n  }\n}\n\nfunction GaugeSegment_tsickle_Closure_declarations() {\n/** @type {?} */\nGaugeSegment.prototype.radius;\n/** @type {?} */\nGaugeSegment.prototype.goal;\n/** @type {?} */\nGaugeSegment.prototype.value;\n/** @type {?} */\nGaugeSegment.prototype.color;\n/** @type {?} */\nGaugeSegment.prototype.bgColor;\n/** @type {?} */\nGaugeSegment.prototype.borderWidth;\n}\n\n","\nexport class GaugeLabel {\n  color: string;\n  text: string;\n  x: number;\n  y: number;\n  fontSize: string;\n/**\n * @param {?=} options\n */\nconstructor(options: {\n    color?: string,\n    text?: string,\n    x?: number,\n    y?: number,\n    fontSize?: string\n  } = {}) {\n    this.color = options.color;\n    this.text = options.text;\n    this.x = options.x || 0;\n    this.y = options.y || 0;\n    this.fontSize = options.fontSize || '1em';\n  }\n}\n\nfunction GaugeLabel_tsickle_Closure_declarations() {\n/** @type {?} */\nGaugeLabel.prototype.color;\n/** @type {?} */\nGaugeLabel.prototype.text;\n/** @type {?} */\nGaugeLabel.prototype.x;\n/** @type {?} */\nGaugeLabel.prototype.y;\n/** @type {?} */\nGaugeLabel.prototype.fontSize;\n}\n\n","/**\n * @category   Module\n * @package    com.kiwity.gauge.gauge\n * @author     Salvador Subarroca (subarroca@gmail.com)\n **/\n\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { GaugeComponent } from './gauge.component';\nexport class GaugeModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  declarations: [GaugeComponent],\n  exports: [GaugeComponent]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GaugeModule_tsickle_Closure_declarations() {\n/** @type {?} */\nGaugeModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGaugeModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @category   Component\n * @package    com.kiwity.gauge.gauge\n * @author     Salvador Subarroca (subarroca@gmail.com)\n **/\n\n\nimport { Component, Input, OnInit } from '@angular/core';\n\nimport { GaugeLabel } from './shared/gauge-label';\nimport { GaugeSegment } from './shared/gauge-segment';\nexport class GaugeComponent implements OnInit {\n   bgRadius = 100;\n   bgColor: string;\n   rounded = true;\n   reverse = false;\n   animationSecs = 0.5;\n\n   labels: GaugeLabel[];\n/**\n * @param {?} segments\n * @return {?}\n */\nset segments(segments: GaugeSegment[]) {\n    this.segmentsLoaded = false;\n    this.sortedSegments = this.sortSegments(segments);\n\n    // wait a bit and start animation\n    setTimeout(\n      () => this.segmentsLoaded = true,\n      0);\n  }\n  sortedSegments: GaugeSegment[];\n  segmentsLoaded = false;\n\n  isIE11 = /Trident.*rv[ :]*11\\./.test(navigator.userAgent);\nconstructor() { }\n/**\n * @return {?}\n */\nngOnInit() {\n  }\n/**\n * @param {?} segments\n * @return {?}\n */\nsortSegments(segments: GaugeSegment[]) {\n    return segments && segments.sort((a: GaugeSegment, b: GaugeSegment) => {\n      if (this.reverse) {\n        return (a.value / a.goal > b.value / b.goal) ? 1 : -1;\n      } else {\n        return (a.value / a.goal > b.value / b.goal) ? -1 : 1;\n      }\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ng-gauge',\n  template: `\n    <svg viewBox=\"0 0 200 200\">\n      <g\n        class=kw-holder\n        [attr.transform]=\"isIE11 ? 'translate(100 100) rotate(-90)' : ''\">\n        <circle\n          class=kw-back\n          [attr.r]=\"bgRadius\"\n          [style.fill]=bgColor/>\n\n          <g\n            *ngFor=\"let segment of sortedSegments\">\n            <circle\n              class=kw-mid\n              [style.stroke]=segment.bgColor\n              [style.strokeWidth]=segment.borderWidth\n              [attr.r]=segment.computedRadius/>\n\n              <circle\n                class=kw-front\n\n                [style.transition]=\"'stroke-dasharray ' + animationSecs + 's'\"\n                [style.stroke]=segment.color\n                [style.strokeWidth]=segment.borderWidth\n                [style.strokeDasharray]=\"segmentsLoaded ? segment.strokeProgress : segment.strokeEmptyProgress\"\n                [style.strokeLinecap]=\"rounded ? 'round' : ''\"\n                [attr.r]=segment.computedRadius/>\n          </g>\n      </g>\n\n      <g\n        transform=\"translate(100, 100)\">\n        <text\n          class=kw-label\n          *ngFor=\"let label of labels\"\n          [attr.x]=label.x\n          [attr.y]=label.y\n          [style.fill]=label.color\n          [style.fontSize]=label.fontSize\n          text-anchor=middle>\n          {{label.text}}\n        </text>\n      </g>\n    </svg>\n  `,\n  styles: [`\n    .kw-mid,\n    .kw-front {\n      fill: transparent;\n    }\n\n    .kw-holder {\n      -webkit-transform: translate(100px, 100px) rotate(-90deg);\n              transform: translate(100px, 100px) rotate(-90deg);\n    }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'bgRadius': [{ type: Input },],\n'bgColor': [{ type: Input },],\n'rounded': [{ type: Input },],\n'reverse': [{ type: Input },],\n'animationSecs': [{ type: Input },],\n'labels': [{ type: Input },],\n'segments': [{ type: Input },],\n};\n}\n\nfunction GaugeComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nGaugeComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGaugeComponent.ctorParameters;\n/** @type {?} */\nGaugeComponent.propDecorators;\n/** @type {?} */\nGaugeComponent.prototype.bgRadius;\n/** @type {?} */\nGaugeComponent.prototype.bgColor;\n/** @type {?} */\nGaugeComponent.prototype.rounded;\n/** @type {?} */\nGaugeComponent.prototype.reverse;\n/** @type {?} */\nGaugeComponent.prototype.animationSecs;\n/** @type {?} */\nGaugeComponent.prototype.labels;\n/** @type {?} */\nGaugeComponent.prototype.sortedSegments;\n/** @type {?} */\nGaugeComponent.prototype.segmentsLoaded;\n/** @type {?} */\nGaugeComponent.prototype.isIE11;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["CommonModule","NgModule","Input","Component"],"mappings":"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"}
