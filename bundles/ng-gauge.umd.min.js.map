{"version":3,"file":"ng-gauge.umd.min.js","sources":["~/ng-gauge/gauge/gauge.component.ts","~/ng-gauge/gauge/gauge.module.ts","~/ng-gauge/gauge/shared/gauge-label.ts","~/ng-gauge/gauge/shared/gauge-segment.ts"],"sourcesContent":["/**\n * @category   Component\n * @package    com.kiwity.gauge.gauge\n * @author     Salvador Subarroca (subarroca@gmail.com)\n **/\n\n\nimport { Component, Input, OnInit } from '@angular/core';\n\nimport { GaugeLabel } from './shared/gauge-label';\nimport { GaugeSegment } from './shared/gauge-segment';\nexport class GaugeComponent implements OnInit {\n   bgRadius = 100;\n   bgColor: string;\n   rounded = true;\n   reverse = false;\n   animationSecs = 0.5;\n\n   labels: GaugeLabel[];\n/**\n * @param {?} segments\n * @return {?}\n */\nset segments(segments: GaugeSegment[]) {\n    this.segmentsLoaded = false;\n    this.sortedSegments = this.sortSegments(segments);\n\n    // wait a bit and start animation\n    setTimeout(\n      () => this.segmentsLoaded = true,\n      0);\n  }\n  sortedSegments: GaugeSegment[];\n  segmentsLoaded = false;\n\n  isIE11 = /Trident.*rv[ :]*11\\./.test(navigator.userAgent);\nconstructor() { }\n/**\n * @return {?}\n */\nngOnInit() {\n  }\n/**\n * @param {?} segments\n * @return {?}\n */\nsortSegments(segments: GaugeSegment[]) {\n    return segments && segments.sort((a: GaugeSegment, b: GaugeSegment) => {\n      if (this.reverse) {\n        return (a.value / a.goal > b.value / b.goal) ? 1 : -1;\n      } else {\n        return (a.value / a.goal > b.value / b.goal) ? -1 : 1;\n      }\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ng-gauge',\n  template: `\n    <svg viewBox=\"0 0 200 200\">\n      <g\n        class=kw-holder\n        [attr.transform]=\"isIE11 ? 'translate(100 100) rotate(-90)' : ''\">\n        <circle\n          class=kw-back\n          [attr.r]=\"bgRadius\"\n          [style.fill]=bgColor/>\n\n          <g\n            *ngFor=\"let segment of sortedSegments\">\n            <circle\n              class=kw-mid\n              [style.stroke]=segment.bgColor\n              [style.strokeWidth]=segment.borderWidth\n              [attr.r]=segment.computedRadius/>\n\n              <circle\n                class=kw-front\n\n                [style.transition]=\"'stroke-dasharray ' + animationSecs + 's'\"\n                [style.stroke]=segment.color\n                [style.strokeWidth]=segment.borderWidth\n                [style.strokeDasharray]=\"segmentsLoaded ? segment.strokeProgress : segment.strokeEmptyProgress\"\n                [style.strokeLinecap]=\"rounded ? 'round' : ''\"\n                [attr.r]=segment.computedRadius/>\n          </g>\n      </g>\n\n      <g\n        transform=\"translate(100, 100)\">\n        <text\n          class=kw-label\n          *ngFor=\"let label of labels\"\n          [attr.x]=label.x\n          [attr.y]=label.y\n          [style.fill]=label.color\n          [style.fontSize]=label.fontSize\n          text-anchor=middle>\n          {{label.text}}\n        </text>\n      </g>\n    </svg>\n  `,\n  styles: [`\n    .kw-mid,\n    .kw-front {\n      fill: transparent;\n    }\n\n    .kw-holder {\n      -webkit-transform: translate(100px, 100px) rotate(-90deg);\n              transform: translate(100px, 100px) rotate(-90deg);\n    }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'bgRadius': [{ type: Input },],\n'bgColor': [{ type: Input },],\n'rounded': [{ type: Input },],\n'reverse': [{ type: Input },],\n'animationSecs': [{ type: Input },],\n'labels': [{ type: Input },],\n'segments': [{ type: Input },],\n};\n}\n\nfunction GaugeComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nGaugeComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGaugeComponent.ctorParameters;\n/** @type {?} */\nGaugeComponent.propDecorators;\n/** @type {?} */\nGaugeComponent.prototype.bgRadius;\n/** @type {?} */\nGaugeComponent.prototype.bgColor;\n/** @type {?} */\nGaugeComponent.prototype.rounded;\n/** @type {?} */\nGaugeComponent.prototype.reverse;\n/** @type {?} */\nGaugeComponent.prototype.animationSecs;\n/** @type {?} */\nGaugeComponent.prototype.labels;\n/** @type {?} */\nGaugeComponent.prototype.sortedSegments;\n/** @type {?} */\nGaugeComponent.prototype.segmentsLoaded;\n/** @type {?} */\nGaugeComponent.prototype.isIE11;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @category   Module\n * @package    com.kiwity.gauge.gauge\n * @author     Salvador Subarroca (subarroca@gmail.com)\n **/\n\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { GaugeComponent } from './gauge.component';\nexport class GaugeModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  declarations: [GaugeComponent],\n  exports: [GaugeComponent]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GaugeModule_tsickle_Closure_declarations() {\n/** @type {?} */\nGaugeModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGaugeModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\nexport class GaugeLabel {\n  color: string;\n  text: string;\n  x: number;\n  y: number;\n  fontSize: string;\n/**\n * @param {?=} options\n */\nconstructor(options: {\n    color?: string,\n    text?: string,\n    x?: number,\n    y?: number,\n    fontSize?: string\n  } = {}) {\n    this.color = options.color;\n    this.text = options.text;\n    this.x = options.x || 0;\n    this.y = options.y || 0;\n    this.fontSize = options.fontSize || '1em';\n  }\n}\n\nfunction GaugeLabel_tsickle_Closure_declarations() {\n/** @type {?} */\nGaugeLabel.prototype.color;\n/** @type {?} */\nGaugeLabel.prototype.text;\n/** @type {?} */\nGaugeLabel.prototype.x;\n/** @type {?} */\nGaugeLabel.prototype.y;\n/** @type {?} */\nGaugeLabel.prototype.fontSize;\n}\n\n","\nexport class GaugeSegment {\n  radius: number;\n  goal: number;\n  value: number;\n  color: string;\n  bgColor: string;\n  borderWidth: number;\n/**\n * @param {?=} options\n */\nconstructor(options: {\n    radius?: number,\n    goal?: number,\n    value?: number,\n    color?: string,\n    bgColor?: string,\n    borderWidth?: number\n  } = {}) {\n    this.radius = options.radius || 100;\n    this.goal = options.goal || 100;\n    this.value = options.value;\n    this.color = options.color;\n    this.bgColor = options.bgColor || 'transparent';\n    this.borderWidth = options.borderWidth || 100;\n  }\n/**\n * @return {?}\n */\nget computedRadius() {\n    return this.radius - this.borderWidth / 2;\n  }\n/**\n * @this {?}\n * @return {?}\n */\nget strokeProgress(this: GaugeSegment) {\n    return `${2 * Math.PI * this.computedRadius * this.value / this.goal} ${2 * Math.PI * this.computedRadius}`;\n  }\n/**\n * @this {?}\n * @return {?}\n */\nget strokeEmptyProgress(this: GaugeSegment) {\n    return `0 ${2 * Math.PI * this.computedRadius}`;\n  }\n}\n\nfunction GaugeSegment_tsickle_Closure_declarations() {\n/** @type {?} */\nGaugeSegment.prototype.radius;\n/** @type {?} */\nGaugeSegment.prototype.goal;\n/** @type {?} */\nGaugeSegment.prototype.value;\n/** @type {?} */\nGaugeSegment.prototype.color;\n/** @type {?} */\nGaugeSegment.prototype.bgColor;\n/** @type {?} */\nGaugeSegment.prototype.borderWidth;\n}\n\n"],"names":["GaugeComponent","this","bgRadius","rounded","reverse","animationSecs","segmentsLoaded","isIE11","test","navigator","userAgent","Object","defineProperty","prototype","set","segments","_this","sortedSegments","sortSegments","setTimeout","ngOnInit","sort","a","b","value","goal","decorators","type","Component","args","selector","template","styles","ctorParameters","propDecorators","Input","bgColor","labels","GaugeModule","NgModule","imports","CommonModule","declarations","exports","GaugeLabel","options","color","text","x","y","fontSize","GaugeSegment","radius","borderWidth","get","Math","PI","computedRadius"],"mappings":"8SAOA,IAAAA,EAAA,WA6BA,SAAAA,IAxBGC,KAAHC,SACc,IACXD,KAAHE,SACa,EAAVF,KAAHG,SACa,EAAVH,KAAHI,cACmB,GAgBjBJ,KAAFK,gBAAmB,EAEjBL,KAAFM,OAAW,uBAAuBC,KAAKC,UAAUC,kBAZjDC,OAAAC,eAAGZ,EAAHa,UAAA,YAAAC,IAAA,SAAGC,GAAH,IAAAC,EAAAf,KACIA,KAAKK,gBAAiB,EACtBL,KAAKgB,eAAiBhB,KAAKiB,aAAaH,GAGxCI,WACE,WAAM,OAAAH,EAAKV,gBAAiB,GAC5B,oCAUNN,EAAAa,UAAAO,SAAA,aAMApB,EAAAa,UAAAK,aAAA,SAFGH,GAEH,IAAAC,EAAAf,KACI,OAFOc,GAAYA,EAASM,KAAK,SAACC,EAAiBC,GAGjD,OAAIP,EAFKZ,QACAkB,EAAGE,MAAQF,EAAEG,KAAOF,EAAEC,MAAQD,EAAEE,KAAQ,GAAI,EAE5CH,EAAGE,MAAQF,EAAEG,KAAOF,EAAEC,MAAQD,EAAEE,MAAQ,EAAK,OA1C5D,GA8COzB,EAAP0B,aACEC,KAAMC,EAAAA,UAAWC,OAGjBC,SAFU,WAGVC,SAFU,43CA+CVC,QAFQ,2OAcThC,EAADiC,eAAC,WAAA,UAEMjC,EAAPkC,gBAKAhC,WAJeyB,KAAMQ,EAAAA,QAKrBC,UAJcT,KAAMQ,EAAAA,QAKpBhC,UAJcwB,KAAMQ,EAAAA,QAKpB/B,UAJcuB,KAAMQ,EAAAA,QAKpB9B,gBAJoBsB,KAAMQ,EAAAA,QAK1BE,SAJaV,KAAMQ,EAAAA,QAKnBpB,WAJeY,KAAMQ,EAAAA,SCrHrB,IAAAG,EAAA,kBAAA,aAAA,GAMkCA,EAAlCZ,aACEC,KAAMY,EAAAA,SAAUV,OADhBW,SACEC,EAAAA,cAEFC,cAEc1C,GADd2C,SAES3C,OAIVsC,EAADL,eAAC,WAAA,UCtBD,IAAAW,EAAA,WAsBA,OAbA,SAuBGC,QAAH,IAAAA,IAAGA,MAhBC5C,KAAK6C,MAAQD,EAAQC,MACrB7C,KAAK8C,KAAOF,EAAQE,KACpB9C,KAAK+C,EAAIH,EAAQG,GAAK,EACtB/C,KAAKgD,EAAIJ,EAAQI,GAAK,EACtBhD,KAAKiD,SAAWL,EAAQK,UAAY,OApBxC,GCAAC,EAAA,WAUA,SAAAA,EAuBGN,QAAH,IAAAA,IAAGA,MAfC5C,KAAKmD,OAASP,EAAQO,QAAU,IAChCnD,KAAKwB,KAAOoB,EAAQpB,MAAQ,IAC5BxB,KAAKuB,MAAQqB,EAAQrB,MACrBvB,KAAK6C,MAAQD,EAAQC,MACrB7C,KAAKmC,QAAUS,EAAQT,SAAW,cAClCnC,KAAKoD,YAAcR,EAAQQ,aAAe,IAsB9C,OAjBA1C,OAAAC,eAuBGuC,EAvBHtC,UAAA,kBAAAyC,IAAA,WACI,OAuBOrD,KAAKmD,OAASnD,KAAKoD,YAAc,mCAjB5C1C,OAAAC,eAoBGuC,EApBHtC,UAAA,kBAAAyC,IAAA,WACI,OAoBO,EAAOC,KAAKC,GAAKvD,KAAKwD,eAAiBxD,KAAKuB,MAAQvB,KAAKwB,KApBpE,IAoByE,EAAO8B,KAAKC,GAAKvD,KAAKwD,gDAd/F9C,OAAAC,eAiBGuC,EAjBHtC,UAAA,uBAAAyC,IAAA,WACI,MAiBO,KAAA,EAASC,KAAKC,GAAKvD,KAAKwD,gDAfnCN,EA7CA"}
